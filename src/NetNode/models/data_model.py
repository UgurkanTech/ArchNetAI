from typing import override
from .net_model import NetModel
from utils.tools import *
from utils.model import *
from utils.response import *

class DataModel(NetModel):
    """
    Represents a data model used in the ArchNetAI system.

    Args:
        host (str): The host of the model.
        model (str): The model name.

    Attributes:
        client: The client associated with the host.
        options: The options for the model.

    Methods:
        setOptions: Sets the options for the model.
        getModelResponse: Generates a response from the model based on the given context.
        printResult: Prints the response and the time taken to generate it.
        getResponseResult: Returns the response generated by the model.
        printStream: Prints the response and the time taken to generate it.

    """
    @override
    def __init__(self, host, model):
        super().__init__(host, model)
        self.client = self.host.client
        self.resultMask.addType(ResultType.STRING)
        self.resultMask.addType(ResultType.STREAM)


    @override
    def createModelResponse(self, context):
        """
        Generates a response from the model based on the given context.

        Args:
            context (str): The context for generating the response.

        Returns:
            dict: The generated response.

        """
        self.modelResponse = self.client.generate(
            model=self.model,
            prompt=context,
            stream=self.options['stream'],
            format='json',
            options= {
                'temperature': self.options['temperature'],
                'top_k': self.options['top_k'],
                'top_p': self.options['top_p'],
                'repeat_penalty': self.options['repeat_penalty'],
                'seed': self.options['seed'],
                'num_ctx': self.options['num_ctx'],
                'num_predict': self.options['num_predict'],
                'use_mlock': self.options['use_mlock'],
            },
            keep_alive= self.options['keep_alive']
        )
        self.isChat = False
